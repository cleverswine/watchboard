@using Humanizer
@using WatchBoard.Database.Entities
@using WatchBoard.Services

<div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content">
        <div class="modal-header">
            <h1 class="modal-title fs-4" id="exampleModalLabel">
                @if (ItemModel.Type == ItemType.Tv)
                {
                    <i class="bi bi-tv me-2"></i>
                }
                else
                {
                    <i class="bi bi-film me-2"></i>
                }
                @ItemModel.Name
            </h1>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body pb-4">
            <p>
                @(ItemModel.Type == ItemType.Tv ? "TV Series" : "Movie")
                <i class="bi bi-dot"></i>@ItemModel.ReleaseDates()
                <i class="bi bi-dot"></i>@(ItemModel.RunTime)m
                @if (ItemModel.Type == ItemType.Tv)
                {
                    <span><i class="bi bi-dot"></i>@ItemModel.Seasons()</span>
                    <span><i class="bi bi-dot"></i>@ItemModel.SeriesStatus.Humanize()</span>
                } </p>
            
            @if (!string.IsNullOrWhiteSpace(ItemModel.Notes))
            {
                <p class="text-muted">
                    <i class="bi bi-info-circle"></i> @ItemModel.Notes
                </p>
            }

            <p class="fw-bold text-uppercase">Overview</p>
            <div class="ps-3">
                @if (ItemModel.OriginalLanguage != "" && ItemModel.OriginalLanguage != "EN")
                {
                    <p class="text-muted small">
                        Language: @ItemModel.OriginalLanguage / Country: @ItemModel.OriginCountry
                    </p>
                }
                <p>
                    @ItemModel.Overview
                </p>
                @if (ItemModel.Type == ItemType.Movie)
                {
                    <p>
                        Directed by @(string.Join(", ", ItemModel.Crew("Director"))) / Written
                        by @(string.Join(", ", ItemModel.Crew("Writer")))
                    </p>
                }
            </div>

            <p class="fw-bold text-uppercase">Cast</p>
            <div class="ps-3">
                <p>
                    <span>@(string.Join(", ", ItemModel.Cast()))</span>
                </p>
            </div>

            <form hx-put="/app/items/@(ItemModel.Id)" hx-target="#card-@(ItemModel.Id)" hx-swap="outerHTML" hx-trigger="change">
                <p class="mt-4">
                    <span class="fw-bold text-uppercase">Watch Options </span>
                    <span class="fw-lighter text-center" style="font-size: 0.8em;"><br/>Watch provider data supplied by <a href="https://www.justwatch.com/">JustWatch</a></span>
                </p>
                <div class="row ms-3">
                    @foreach (var providerOption in ItemModel.GetProviders())
                    {
                        <div class="col-4 form-check text-truncate pe-2">
                            @if (providerOption.Selected)
                            {
                                <input class="form-check-input" type="radio" id="selectedProviderId-@(providerOption.Id)" name="selectedProvider" value="@(providerOption.Id)" checked>
                            }
                            else
                            {
                                <input class="form-check-input" type="radio" id="selectedProviderId-@(providerOption.Id)" name="selectedProvider" value="@(providerOption.Id)">
                            }
                            <label class="form-check-label" for="selectedProviderId-@(providerOption.Id)">
                                @providerOption.Name.Replace(" Channel", "")
                            </label>
                        </div>
                    }
                </div>
            </form>
        </div>
        <div class="modal-footer hstack">
            <button class="btn btn-outline-secondary" hx-indicator="#footer-indicator" hx-put="/app/items/@(ItemModel.Id)/refresh" hx-target="#card-@(ItemModel.Id)" hx-params="none" hx-swap="outerHTML">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
            <div class="dropdown">
                <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                    <i class="bi bi-folder-plus"></i> Move
                </button>
                <ul class="dropdown-menu">
                    @foreach (var b in Boards)
                    {
                        <button class="dropdown-item" hx-indicator="#indicator" hx-put="/app/items/@(ItemModel.Id)/move/@(b.Id)" hx-swap="delete swap:1s" hx-target="#card-@(ItemModel.Id)" type="button">
                            <i class="bi bi-arrow-right me-2"></i> @b.Name
                        </button>
                    }
                </ul>
            </div>
            <button class="btn btn-outline-secondary" hx-swap="delete swap:1s" hx-target="#card-@(ItemModel.Id)" hx-params="none" hx-delete="/app/items/@(ItemModel.Id)" data-bs-dismiss="modal">
                <i class="bi bi-trash"></i> Delete
            </button>
            <a class="btn btn-outline-secondary" href="@ItemModel.ImdbUrl" target="_blank">
                <i class="ms-1 bi bi-arrow-up-right-square"></i>
                IMDB
            </a>
            <div class="htmx-indicator spinner-border spinner-border-sm ms-3" id="footer-indicator" role="status"></div>
            <button type="button" class="btn btn-outline-secondary ms-auto" data-bs-dismiss="modal">Close</button>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public Item ItemModel { get; set; } = new();

    [Parameter]
    public List<Board> Boards { get; set; } = [];
    
}