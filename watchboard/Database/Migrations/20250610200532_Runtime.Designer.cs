// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchBoard.Database;

#nullable disable

namespace WatchBoard.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250610200532_Runtime")]
    partial class Runtime
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("WatchBoard.Database.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreditsJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndDate")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImdbId")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ListId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfSeasons")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginCountry")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalLanguage")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("Overview")
                        .HasMaxLength(1024)
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterBase64")
                        .HasMaxLength(16384)
                        .HasColumnType("TEXT");

                    b.Property<string>("PosterUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProvidersJson")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReleaseDate")
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<int>("RunTime")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SeriesNextEpisodeDate")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int?>("SeriesNextEpisodeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeriesNextEpisodeSeason")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeriesStatus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagLine")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TmdbId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ListId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.List", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Item", b =>
                {
                    b.HasOne("WatchBoard.Database.Entities.List", null)
                        .WithMany("Items")
                        .HasForeignKey("ListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.List", b =>
                {
                    b.HasOne("WatchBoard.Database.Entities.Board", null)
                        .WithMany("Lists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Board", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.List", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
