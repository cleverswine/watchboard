// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WatchBoard.Database;

#nullable disable

namespace WatchBoard.Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("WatchBoard.Database.Entities.Backdrop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .HasColumnType("BLOB");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Backdrops");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Board", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.BoardList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BoardId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Default")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Lists");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BoardListId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ItemType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Language")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TmDbId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WatchProvider")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BoardListId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Json", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Data")
                        .HasColumnType("TEXT");

                    b.Property<string>("DataType")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Json");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Poster", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .HasColumnType("BLOB");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("TEXT");

                    b.Property<string>("MediaType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Posters");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Backdrop", b =>
                {
                    b.HasOne("WatchBoard.Database.Entities.Item", null)
                        .WithOne("Backdrop")
                        .HasForeignKey("WatchBoard.Database.Entities.Backdrop", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.BoardList", b =>
                {
                    b.HasOne("WatchBoard.Database.Entities.Board", null)
                        .WithMany("Lists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Item", b =>
                {
                    b.HasOne("WatchBoard.Database.Entities.BoardList", null)
                        .WithMany("Items")
                        .HasForeignKey("BoardListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Json", b =>
                {
                    b.HasOne("WatchBoard.Database.Entities.Item", null)
                        .WithOne("Json")
                        .HasForeignKey("WatchBoard.Database.Entities.Json", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Poster", b =>
                {
                    b.HasOne("WatchBoard.Database.Entities.Item", null)
                        .WithOne("Poster")
                        .HasForeignKey("WatchBoard.Database.Entities.Poster", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Board", b =>
                {
                    b.Navigation("Lists");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.BoardList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("WatchBoard.Database.Entities.Item", b =>
                {
                    b.Navigation("Backdrop")
                        .IsRequired();

                    b.Navigation("Json")
                        .IsRequired();

                    b.Navigation("Poster")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
